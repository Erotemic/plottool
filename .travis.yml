
env:
    global:
        - secure: "SmUkVoJL83pgL3frRNPrE6DScgm/Bu5pQiF+5ycQHV+QxsQTp841v0rPYlXRSZv35irlfyghef2X6FQrPR6nWXCqesTdveHALYefKDlQLmE/ojlMcjV81v32Fffw/Ml6bLy4KJiYXhBcYKbJciPMK9qf23TtKoqwYUgXQBCEwrzOfWuRSeOfvAZ3DCJiuaTl9mWrpVZoPQCuS11Uq/5TObFZQaNAhtbJ20dq8EjaE69f7D5Te08DnxOQEeeihTMUwjFbTrjIAVk9XEUK35D/kAMBpM4butrdqA+uCQO1DkHj7E0NmRP21CKCY8mOxOt97hLROGeNO6mC8cNFahEjcYMINng5o2GdmwnO7vaqwpZ+JqGLumCu2Hx66Rs59gMp0Lrq2e8xDhaUIXjJpZgSfd5sjdrT3Ppx9fdWGewuRCbAT/tifppuqVmwXcADFMFVW/cjhdNlmYbqmYJ3lI/Y4AiAd53SeoQkmKxscZ9ICaamg5v0GHPNpYcdENuhdMfm4tTWSS0xX40WRblZZj8lNKpfEIasxplY+usE37Nyt98w1JKjdyKY6N8Xyf0ahhAeNI93CuYou3FtII8UdhEj1fVKCaGaqcCa2DVi/wn13EVb0PP3FOi1+//vVTaJz2kugM8+jREbSt6YaLWlkE6bPG7863/lrkbT4EKLbWnYTwo="

        - secure: "QMeqgtCn6L4MushoLzvRrqxyEX37sQGwkMSW1KdWbpA1axRI4F2BkkzsMCJsN6iK7mmCaG0wsA3fNuUpBZmpcfJN5ZOEwwsgsuUjAh3fojFOzEZrG44AM9hR1KHNKU0wGFz5dfhG9WFpGsnZCQC9oJcc+Kr3uA9XepEV90B0AIQrltSifqETHIr9fiuewI3g9+FXPTAeDRBUt7+K2ZGDCh8OpN9EaEwhkWr4NRXxLb0r2k7QcAFmdarX5fo0eGIATAtkvX33cZuHKmZDtBHVtuvKIzq25NQoun+hBRsnd/TusvzwBM2fZtl5Z4YU8IFGZAfm6AbEABq1B5phCieggI1TfdJs5hfLPFoC7chPsX6zC8Skvz8nWEmgR5qCe4r6MFRy3R8HyKmahapemDB7ycptrRRCy3BcqHha7k5OSw/SWMVutyXylK3jZHJYIQ6DMCemSnjWI5GSxPshey3vDRdwhKxNLE7RbMU2Czm7XcRtTtkMVClBoshHiZhbgnz2CoLgvRgK7Mgu6VB5Z5mrBK2485A0EkOblkEuhQX+75F5P1nqBR5wBUniNXHBkA/UThpv2w5DdhZTE+OLHkc8vv2KRBIDh1j68HxAO60L7nLLQM/pV8vXWzv0sgHNFwvlHIrC8MuKlhpdXleConwCssM0SAYOQLGTCvgEIuQBoto="

        - secure: "UoEx2qkYz6ZK+Ua/bySlSn4gG7g/8feijFv14/bM4wiVB09kYXNdTpvDInI87PRIyaFKUwcvVwabaVoiCHy4EQlUrrIxyRrzBesBgCJDMQZhhkzV6rHTOH0Z8ftwsIjN4IaTlw1j00W6wyaiH6cZ2DRknRMsmNHUxc4blJj7N9gUc5gUssix73IEB+6ALv13EZ7W3C4ZPEMXZrx7iAuoU+zteUr/l0Q4VVd1jHs2L30pn89SxaqPOfInOoyKmbZ6m4bDyZmfTodOxiSTdsx/L6mQyX8Lc/0DKHEGUnqLaqsaDqVaVdQyj7jSZK3raJNsmQ1cvjOWQodqYQpeY3Dw3KIO8znrfW+T9sd2zrc+b1/dLL/ejM88MroXHQdT2u9pWtaDv9f3JvGKEQDoi0KxupaCbrqHIjHhZrKokS6MBrP9HOB6SOs4QpYNS2YW0gFlxnVYh6EeGCPuZjAgBzonX8bDE3i2y8HUcJMG0kb5AzkwDMoH/0wCRtKZD6Z5FbfHWshPKh2cEmTTXx1HEKloNOoE9McwlKHzwYlZDuLSQz0Joq3HE9i7yUmA4fGCJ8vntjYVskjoIOIkJbl5V7pLY9ITQDDARJ9JtY+nMIqWSzmjAn97CdP7wYV96YVpmLgnEtlriywtFkqEGwSMrkTI143HOvB18nrsPCYbix5ijjk="


language: python
sudo: false

cache: 
    apt: true
    directories:
        - $HOME/.pip-cache
        - $HOME/gpg_install_prefix
        - $HOME/.cache/pip
        - $HOME/download

python:
  - "2.7"
  - "3.5"
  - "3.6"
  - "3.7"
  - "3.8"
  #
before_install:
  - pip install pip -U
  - pip install -r requirements.txt -U

install:
  - | 
      MB_PYTHON_TAG="py2.py3-none-any"
      VERSION=$(python -c "import setup; print(setup.VERSION)") 
      echo "VERSION = $VERSION"
      echo "MB_PYTHON_TAG = $MB_PYTHON_TAG"
  - | 
      python setup.py bdist_wheel --universal 
  - |
      BDIST_WHEEL_PATH=$(ls dist/*-$VERSION-$MB_PYTHON_TAG*.whl)
      echo "BDIST_WHEEL_PATH = $BDIST_WHEEL_PATH"
  - pip install $BDIST_WHEEL_PATH
    
script: 
  - travis_wait ./run_doctests.sh

after_success: 
    - codecov 
    - gpg --version
    - gpg2 --version
    - export GPG_EXECUTABLE=gpg2
    - openssl version
    - | 
        __heredoc__='''
        # Load or generate secrets
        source $(secret_loader.sh)
        echo $TWINE_USERNAME
        echo $TWINE_PASSWORD
        echo $CI_GITHUB_SECRET

        # encrypt relevant travis variables
        travis encrypt TWINE_USERNAME=$TWINE_USERNAME 
        travis encrypt TWINE_PASSWORD=$TWINE_PASSWORD  
        travis encrypt CI_GITHUB_SECRET=$CI_GITHUB_SECRET

        # HOW TO ENCRYPT YOUR SECRET GPG KEY
        IDENTIFIER="travis-ci-Erotemic"
        KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "KEYID = $KEYID"

        # Export plaintext gpg public keys, private keys, and trust info
        mkdir -p dev
        gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
        gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Encrypt gpg keys and trust with travis secret
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc
        echo $KEYID > dev/public_gpg_key

        source $(secret_unloader.sh)

        # Look at what we did, clean up, and add it to git
        ls dev/*.enc
        rm dev/gpg_owner_trust dev/*.pgp
        git status
        git add dev/*.enc
        git add dev/public_gpg_key

        '''  # <hack vim "regex" parser> '
    - |
        # Install a more recent version of GPG
        # https://gnupg.org/download/
        export GPG_INSTALL_PREFIX=$HOME/gpg_install_prefix
        export LD_LIBRARY_PATH=$GPG_INSTALL_PREFIX/lib:$LD_LIBRARY_PATH
        export PATH=$GPG_INSTALL_PREFIX/bin:$PATH
        export CPATH=$GPG_INSTALL_PREFIX/include:$CPATH
        export GPG_EXECUTABLE=$GPG_INSTALL_PREFIX/bin/gpg
        ls $GPG_INSTALL_PREFIX
        ls $GPG_INSTALL_PREFIX/bin || echo "no bin"
        if [[ ! -f "$GPG_INSTALL_PREFIX/bin/gpg" ]]; then
            # try and have travis cache this
            mkdir -p $GPG_INSTALL_PREFIX
            echo $GPG_INSTALL_PREFIX
            OLD=$(pwd)
            cd $GPG_INSTALL_PREFIX
            pip install ubelt

            ERROR_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.36.tar.bz2',
                hash_prefix='6e5f853f77dc04f0091d94b224cab8e669042450f271b78d0ea0219',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GCRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.5.tar.bz2',
                hash_prefix='b55e16e838d1b1208e7673366971ae7c0f9c1c79e042f41c03d1',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            KSBA_CRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libksba/libksba-1.3.5.tar.bz2',
                hash_prefix='60179bfd109b7b4fd8d2b30a3216540f03f5a13620d9a5b63f1f95',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            ASSUAN_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.3.tar.bz2',
                hash_prefix='e7ccb651ea75b07b2e687d48d86d0ab83cba8e2af7f30da2aec',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NTBLTLS_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.1.2.tar.bz2',
                hash_prefix='54468208359dc88155b14cba37773984d7d6f0f37c7a4ce13868d',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NPTH_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2',
                hash_prefix='2ed1012e14a9d10665420b9a23628be7e206fd9348111ec751349b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GPG_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.17.tar.bz2',
                hash_prefix='a3cd094addac62b4b4ec1683005a2bec761ea2aacf6daf904316b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")

            tar xjf $ERROR_FPATH
            tar xjf $GCRYPT_FPATH
            tar xjf $KSBA_CRYPT_FPATH
            tar xjf $ASSUAN_FPATH
            tar xjf $NTBLTLS_FPATH
            tar xjf $NPTH_FPATH
            tar xjf $GPG_FPATH
            (cd libgpg-error-1.36 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libgcrypt-1.8.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libksba-1.3.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libassuan-2.5.3 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd ntbtls-0.1.2 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd npth-1.6 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd gnupg-2.2.17 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            echo "GPG_EXECUTABLE = '$GPG_EXECUTABLE'"
            cd $OLD
        fi
    # Decrypt and import GPG Keys / trust
    - $GPG_EXECUTABLE --version
    - openssl version
    - $GPG_EXECUTABLE --list-keys
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - $GPG_EXECUTABLE --list-keys
    - MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
    - VERSION=$(python -c "import setup; print(setup.VERSION)") 
    - |
        pip install twine
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
        elfi
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install six twine
          pip install --upgrade pyOpenSSL
        fi
    # Package and publish to pypi (if on release)
    # Package and publish to pypi (if on release)
    - |
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"

        KEYID=$(cat dev/public_gpg_key)
        echo "KEYID = '$KEYID'"
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            # use set +x to log all intermediate commands 
            export CURRENT_BRANCH=$TRAVIS_BRANCH
            TAG_AND_UPLOAD=yes
        else
            TAG_AND_UPLOAD=no
        fi
        MB_PYTHON_TAG=$MB_PYTHON_TAG \
            USE_GPG=True \
            GPG_KEYID=$KEYID \
            CURRENT_BRANCH=$TRAVIS_BRANCH \
            TWINE_PASSWORD=$TWINE_PASSWORD \
            TWINE_USERNAME=$TWINE_USERNAME \
            GPG_EXECUTABLE=$GPG_EXECUTABLE \
            DEPLOY_BRANCH=release \
            TAG_AND_UPLOAD=$TAG_AND_UPLOAD \
            ./publish.sh
